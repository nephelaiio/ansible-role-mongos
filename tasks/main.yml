---
- name: Install package prerequisites for Debian systems
  ansible.builtin.package:
    name: pkg-config
    state: present
  when: ansible_os_family == "Debian"

- name: Install package prerequisites for RedHat systems
  ansible.builtin.package:
    name: yum-plugin-versionlock
    state: present
  when: ansible_os_family == "RedHat"

- name: Release package holds
  ansible.builtin.include_tasks: lock.yml
  vars:
    _lock_state: install

- name: Install packages and configure package holds
  block:
    - name: Install packages
      ansible.builtin.package:
        name: "{{ mongos_package_name }}"
        state: "{{ mongos_package_state }}"

  always:
    - name: Configure package holds
      ansible.builtin.include_tasks: lock.yml
      vars:
        _lock_state: hold

- name: Set systemd unit facts for Debian systems
  when: ansible_os_family == 'Debian'
  block:
    - name: Query systemd service location
      ansible.builtin.command:
        cmd: pkg-config systemd --variable=systemdsystemunitdir
      changed_when: false
      register: _systemd_query
      tags: skip_ansible_lint

    - name: Record system service location
      ansible.builtin.set_fact:
        mongos_systemd_unit_location: "{{ _systemd_query.stdout }}"

- name: Set systemd unit facts for RedHat systems
  ansible.builtin.set_fact:
    mongos_systemd_unit_location: /etc/systemd/system
  when: ansible_os_family == 'RedHat'

- name: Record mongos binary location
  ansible.builtin.command:
    cmd: which mongos
  tags: skip_ansible_lint
  register: _mongos_query
  changed_when: false

- name: Include configuration tasks
  ansible.builtin.include_tasks: config.yml
  when: mongos_replicaset_config_members | length > 0

- name: Create systemd configuration
  ansible.builtin.template:
    dest: "{{ mongos_systemd_unit_location }}/mongos.service"
    src: systemd.service.j2
    owner: root
    group: root
    mode: 0644
  vars:
    _user: "{{ 'mongodb' if ansible_os_family == 'Debian' else 'mongod' }}"
    _unit_exec_args: "--config {{ mongos_config_file }}"
    _unit_config:
      Unit:
        After: network-online.target
        Wants: network-online.target
      Service:
        User: "{{ _user }}"
        Group: "{{ _user }}"
        ExecStart: "{{ _mongos_query.stdout }} {{ _unit_exec_args }}"
        Type: simple
        RuntimeDirectory: mongodb
        LimitFSIZE: infinity
        LimitCPU: infinity
        LimitAS: infinity
        LimitNOFILE: 64000
        LimitNPROC: 64000
        LimitMEMLOCK: infinity
        TasksMax: infinity
        TasksAccounting: false
      Install:
        WantedBy: multi-user.target
  notify: daemon_reload

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Include service tasks
  ansible.builtin.include_tasks: service.yml
  when: mongos_service_manage
