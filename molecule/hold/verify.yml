---
- name: Verify mongos deployment
  hosts: mongos
  become: true
  tasks:
    - name: Query Debian package versions
      ansible.builtin.shell:
        cmd: "apt-cache madison {{ item }} | awk -F'|' '{ print $2 }'"
      loop: "{{ mongos_package_name }}"
      register: _mongos_package_query
      when: ansible_os_family == 'Debian'
      changed_when: false

    - name: Query RedHat package versions
      ansible.builtin.shell:
        cmd: "yum list {{ item }} --showduplicates | grep '^{{ item }}' | awk '{ print $1,$2 }' | sort -r"
      loop: "{{ mongos_package_name }}"
      register: _mongos_package_query
      when: ansible_os_family == "RedHat"
      changed_when: false

    - name: Initialize package versions
      ansible.builtin.set_fact:
        mongos_package_list: []

    - name: Set target Debian package versions
      ansible.builtin.set_fact:
        mongos_package_list: "{{ mongos_package_list + [_package] }}"
      vars:
        _stdout: "{{ item.stdout_lines }}"
        _multiple: "{{ _stdout | length > 1 }}"
        _version: "{{ _stdout[0] if not _multiple else _stdout[1] }}"
        _package: "{{ item.item }}={{ _version | trim }}"
      loop_control:
        label: "{{ item.item }}"
      loop: "{{ _mongos_package_query.results }}"
      when: ansible_os_family == "Debian"

    - name: Set target RedHat package versions
      ansible.builtin.set_fact:
        mongos_package_list: "{{ mongos_package_list + [_package] }}"
      vars:
        _stdout: "{{ item.stdout_lines }}"
        _multiple: "{{ _stdout | length > 1 }}"
        _target: "{{ (_stdout[0] if not _multiple else _stdout[1]).split(' ') }}"
        _arch: "{{ _target[0].split('.')[1] }}"
        _name: "{{ _target[0].split('.')[0] }}"
        _version: "{{ _target[1] }}"
        _package: "{{ _name }}-{{ _version }}.{{ _arch }}"
      loop_control:
        label: "{{ item.item }}"
      loop: "{{ _mongos_package_query.results }}"
      when: ansible_os_family == "RedHat"

    - name: Gather package facts
      ansible.builtin.package_facts:

    - name: Verify package versions
      ansible.builtin.fail:
        msg: "Expected installed version for package {{ _package }} to be {{ _version }}, found {{ _installed }}"
      vars:
        _package: "{{ item.split('=') | first }}"
        _version: "{{ item.split('=') | last }}"
        _installed: "{{ (packages[_package] | default([{'version': 'None'}]))[0].version }}"
      loop: "{{ mongos_package_list }}"
      when:
        - ansible_os_family == "Debian"
        - _package not in packages or _version != _installed

    - name: Verify package versions
      ansible.builtin.fail:
        msg: "Expected installed version for package {{ _package }} to be {{ _version }}, found {{ _installed }}"
      vars:
        _prefix: "^{{ _package }}-"
        _suffix: "-.*$"
        _package: "{{ item.0 }}"
        _version: "{{ item.1 | regex_replace(_prefix, '') | regex_replace(_suffix, '') }}"
        _installed: "{{ (packages[_package] | default([{'version': 'None'}]))[0].version }}"
      loop: "{{ mongos_package_name | zip(mongos_package_list) }}"
      when:
        - ansible_os_family == "RedHat"
        - _package not in packages or _version != _installed
